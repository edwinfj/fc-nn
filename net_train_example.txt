# python2.7
"""
This module demonstrates how to train a fully connected net.
The basic steps to do training:
1. create a net model. The architecture of the net is:
	input --- {-affine-[-batch normalization-]-relu-[-dropout-]} * N --- softmax.
	By default batch normalization and dropout are not used. Use L2 weight decay
	for regularization. refer to lib/fc_net.py for details.
2. create a solver, which specifies the optimization method for training. Refer
	to lib/solver.py for details.
	Options of optimization method:
	- sgd
	- sgd_momentum: Nesterov momentum
	- rms_prop
	- adam
"""

import numpy as np
import matplotlib.pyplot as plt
from lib.classifiers.fc_net import *
from lib.solver import Solver

# some pseudo-initialization for the model and data
input_dim = 1000
num_classes = 10
hid_dims = [100, 100] # two hidden layers, therefore a three layer fc-net
# import the training set and validation set, store them in a dict
data = {'X_train': ????, 'y_train': ???, 'X_val': ?, 'y_val': ?}


# enable dropout and batch normalization, set weight initialization std to
# weight_scale, set regularization to reg, and create the net model
model = FullyConnectedNet(hid_dims, input_dim=input_dim, num_classes=num_class,
				dropout=0.5, use_batchnorm=True, weight_scale=5e-2, reg=1e-2)
# create the solver, pass net model and data, and specify optimization config
solver = Solver(model, data, update_rule='adam', 
								optim_config={'learning_rate': 1e-3},
			          lr_decay=0.95, batch_size=256, print_every=100, 
                num_epochs=20)
solver.train() # train the model in solver
# Run below to visualize training loss and train / val accuracy
plt.subplot(2, 1, 1)
plt.title('Training loss')
plt.plot(solver.loss_history, 'o')
plt.xlabel('Iteration')

plt.subplot(2, 1, 2)
plt.title('Accuracy')
plt.plot(solver.train_acc_history, '-o', label='train')
plt.plot(solver.val_acc_history, '-o', label='val')
plt.plot([0.5] * len(solver.val_acc_history), 'k--')
plt.xlabel('Epoch')
plt.legend(loc='lower right')
plt.gcf().set_size_inches(15, 12)
plt.show()